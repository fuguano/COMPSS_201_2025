a <- 0.5 # Set to 0.5 as default
b <- 0.0 # Set to 0.1 as default
c <- 0.0 # Set to 0.8 as default
# Let's generate some data as if health insurance were not randomized.
# a <- 0.5 #Gend Income Covariance
# b <- 0.1 #Gend Insurance Covariance
# c <- 0.8 #Income Insurance
# Some betas (slope coefficients that only god sees) for later. She knows all!
b1 <-1 # Gend Beta
b2 <-5 # Income Beta
b3 <-3 #Insurance
shifter <- 30
# Now generate the data, given a cetain covariance matrix.
Sigma <- matrix(c(1, a, b, a, 1, c,b, c, 1), nrow=3)
data = mvrnorm(n, mu, Sigma, empirical=FALSE)
# Being lazy and generating some data columns from above.
Gender = data[, 1]  # standard normal (mu=0, sd=1)
Income = data[, 2]  # standard normal (mu=0, sd=1)
Insurance= data[, 3]  # standard normal (mu=0, sd=1)
# Gender and income should be binary
Ins <- Insurance>0
Gend <- Gender>0
cor(Ins,Gend)
cor(Ins,Income)
cor(Gend,Income)
# We are going to generate some arbitrary Health Index
Health <- shifter +  rnorm(n,mean=0,sd=1) + b1*Gend + b2*Income + b3* Ins
# Let's do a manual comparison of Health Across the Insured and Uninsured.
mydata <- data.frame(Income, Gend, Health, Ins)
# Calculate Means by Group (using ddply).
mu <- ddply(mydata, "Ins", summarise, grp.mean=mean(Health))
# Plot my health outcome by Insurance Status in Pretty Graph
ggplot(mydata, aes(x=Health, color=Ins, fill=Ins)) +
scale_color_manual(values=c("#002676", "#FC9313")) +
scale_fill_manual(values=c("#002676", "#FC9313")) +
geom_histogram(alpha=0.1, position="identity", bins=50)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=Ins),
linetype="dashed") +
labs(title="Health Outcomes by Insurance Status",x="Health Index", y = "Count")+
theme_classic()
# Let's compare across treatment
# First - do this by hand. Difference in means. Unknown and unequal variances.
M1 <- mean(mydata[Ins == 'TRUE', 'Health'])
M2 <- mean(mydata[Ins == 'FALSE', 'Health'])
n1 <- sum(Ins)
n2 <- n-n1
V1 <- var(mydata[Ins == 'TRUE', 'Health'])
V2 <- var(mydata[Ins == 'FALSE', 'Health'])
S <- sqrt((V1 / n1) + (V2 / n2))
statistic <- (M1 - M2 - 0) / S
print(statistic)
t_health <- t.test(Health ~ Ins)
print(t_health)
# Lecture 4
# Let's do some testing of differences in means!
# and then some regression stuff.
# The repo also contains a knitr version of this file, which makes nice pdf files.....
rm(list = ls())
set.seed(22092008)
library(pacman)
# ggplot makes pretty graphs. dplyr is awesome. More later.
p_load(ggplot2, dplyr, crosstable, flextable, plyr, MASS,stargazer)
# The goal is to generate some data from the relationship:
# Health <- shifter + b1*Gend + b2*Income + b3* Ins +  rnorm(n,mean=0,sd=1)
# We have to generate data for the variables (Gend, Income, Ins), a residual, and pick values
# for the coefficients. Let's assume a sample size of 1000.
n <- 1000 # Sample Size
mu <- c(0, 0,0) # (means of my rhs variables)
# Let's generate some data as if health insurance were randomized.
a <- 0.5 # Set to 0.5 as default
b <- 0.0 # Set to 0.1 as default
c <- 0.0 # Set to 0.8 as default
# Let's generate some data as if health insurance were not randomized.
# a <- 0.5 #Gend Income Covariance
# b <- 0.1 #Gend Insurance Covariance
# c <- 0.8 #Income Insurance
# Some betas (slope coefficients that only god sees) for later. She knows all!
b1 <-1 # Gend Beta
b2 <-5 # Income Beta
b3 <-0  #Insurance
shifter <- 30
# Now generate the data, given a cetain covariance matrix.
Sigma <- matrix(c(1, a, b, a, 1, c,b, c, 1), nrow=3)
data = mvrnorm(n, mu, Sigma, empirical=FALSE)
# Being lazy and generating some data columns from above.
Gender = data[, 1]  # standard normal (mu=0, sd=1)
Income = data[, 2]  # standard normal (mu=0, sd=1)
Insurance= data[, 3]  # standard normal (mu=0, sd=1)
# Gender and income should be binary
Ins <- Insurance>0
Gend <- Gender>0
cor(Ins,Gend)
cor(Ins,Income)
cor(Gend,Income)
# We are going to generate some arbitrary Health Index
Health <- shifter +  rnorm(n,mean=0,sd=1) + b1*Gend + b2*Income + b3* Ins
# Let's do a manual comparison of Health Across the Insured and Uninsured.
mydata <- data.frame(Income, Gend, Health, Ins)
# Calculate Means by Group (using ddply).
mu <- ddply(mydata, "Ins", summarise, grp.mean=mean(Health))
# Plot my health outcome by Insurance Status in Pretty Graph
ggplot(mydata, aes(x=Health, color=Ins, fill=Ins)) +
scale_color_manual(values=c("#002676", "#FC9313")) +
scale_fill_manual(values=c("#002676", "#FC9313")) +
geom_histogram(alpha=0.1, position="identity", bins=50)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=Ins),
linetype="dashed") +
labs(title="Health Outcomes by Insurance Status",x="Health Index", y = "Count")+
theme_classic()
# Let's compare across treatment
# First - do this by hand. Difference in means. Unknown and unequal variances.
M1 <- mean(mydata[Ins == 'TRUE', 'Health'])
M2 <- mean(mydata[Ins == 'FALSE', 'Health'])
n1 <- sum(Ins)
n2 <- n-n1
V1 <- var(mydata[Ins == 'TRUE', 'Health'])
V2 <- var(mydata[Ins == 'FALSE', 'Health'])
S <- sqrt((V1 / n1) + (V2 / n2))
statistic <- (M1 - M2 - 0) / S
print(statistic)
t_health <- t.test(Health ~ Ins)
print(t_health)
# Lecture 4
# Let's do some testing of differences in means!
# and then some regression stuff.
# The repo also contains a knitr version of this file, which makes nice pdf files.....
rm(list = ls())
set.seed(22092008)
library(pacman)
# ggplot makes pretty graphs. dplyr is awesome. More later.
p_load(ggplot2, dplyr, crosstable, flextable, plyr, MASS,stargazer)
# The goal is to generate some data from the relationship:
# Health <- shifter + b1*Gend + b2*Income + b3* Ins +  rnorm(n,mean=0,sd=1)
# We have to generate data for the variables (Gend, Income, Ins), a residual, and pick values
# for the coefficients. Let's assume a sample size of 1000.
n <- 1000 # Sample Size
mu <- c(0, 0,0) # (means of my rhs variables)
# Let's generate some data as if health insurance were randomized.
a <- 0.5 # Set to 0.5 as default
b <- 0.0 # Set to 0.1 as default
c <- 0.0 # Set to 0.8 as default
# Let's generate some data as if health insurance were not randomized.
# a <- 0.5 #Gend Income Covariance
# b <- 0.1 #Gend Insurance Covariance
# c <- 0.8 #Income Insurance
# Some betas (slope coefficients that only god sees) for later. She knows all!
b1 <-1 # Gend Beta
b2 <-5 # Income Beta
b3 <-3  #Insurance
shifter <- 30
# Now generate the data, given a cetain covariance matrix.
Sigma <- matrix(c(1, a, b, a, 1, c,b, c, 1), nrow=3)
data = mvrnorm(n, mu, Sigma, empirical=FALSE)
# Being lazy and generating some data columns from above.
Gender = data[, 1]  # standard normal (mu=0, sd=1)
Income = data[, 2]  # standard normal (mu=0, sd=1)
Insurance= data[, 3]  # standard normal (mu=0, sd=1)
# Gender and income should be binary
Ins <- Insurance>0
Gend <- Gender>0
cor(Ins,Gend)
cor(Ins,Income)
cor(Gend,Income)
# We are going to generate some arbitrary Health Index
Health <- shifter +  rnorm(n,mean=0,sd=1) + b1*Gend + b2*Income + b3* Ins
# Let's do a manual comparison of Health Across the Insured and Uninsured.
mydata <- data.frame(Income, Gend, Health, Ins)
# Calculate Means by Group (using ddply).
mu <- ddply(mydata, "Ins", summarise, grp.mean=mean(Health))
# Plot my health outcome by Insurance Status in Pretty Graph
ggplot(mydata, aes(x=Health, color=Ins, fill=Ins)) +
scale_color_manual(values=c("#002676", "#FC9313")) +
scale_fill_manual(values=c("#002676", "#FC9313")) +
geom_histogram(alpha=0.1, position="identity", bins=50)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=Ins),
linetype="dashed") +
labs(title="Health Outcomes by Insurance Status",x="Health Index", y = "Count")+
theme_classic()
# Let's compare across treatment
# First - do this by hand. Difference in means. Unknown and unequal variances.
M1 <- mean(mydata[Ins == 'TRUE', 'Health'])
M2 <- mean(mydata[Ins == 'FALSE', 'Health'])
n1 <- sum(Ins)
n2 <- n-n1
V1 <- var(mydata[Ins == 'TRUE', 'Health'])
V2 <- var(mydata[Ins == 'FALSE', 'Health'])
S <- sqrt((V1 / n1) + (V2 / n2))
statistic <- (M1 - M2 - 0) / S
print(statistic)
t_health <- t.test(Health ~ Ins)
print(t_health)
t_inc <- t.test(Income ~ Ins)
print(t_inc)
# Lecture 4
# Let's do some testing of differences in means!
# and then some regression stuff.
# The repo also contains a knitr version of this file, which makes nice pdf files.....
rm(list = ls())
set.seed(22092008)
library(pacman)
# ggplot makes pretty graphs. dplyr is awesome. More later.
p_load(ggplot2, dplyr, crosstable, flextable, plyr, MASS,stargazer)
# The goal is to generate some data from the relationship:
# Health <- shifter + b1*Gend + b2*Income + b3* Ins +  rnorm(n,mean=0,sd=1)
# We have to generate data for the variables (Gend, Income, Ins), a residual, and pick values
# for the coefficients. Let's assume a sample size of 1000.
n <- 1000 # Sample Size
mu <- c(0, 0,0) # (means of my rhs variables)
# Let's generate some data as if health insurance were randomized.
# a <- 0.5 # Set to 0.5 as default
# b <- 0.0 # Set to 0.1 as default
# c <- 0.0 # Set to 0.8 as default
# Let's generate some data as if health insurance were not randomized.
a <- 0.5 #Gend Income Covariance
b <- 0.1 #Gend Insurance Covariance
c <- 0.8 #Income Insurance
# Some betas (slope coefficients that only god sees) for later. She knows all!
b1 <-1 # Gend Beta
b2 <-5 # Income Beta
b3 <-3  #Insurance
shifter <- 30
# Now generate the data, given a cetain covariance matrix.
Sigma <- matrix(c(1, a, b, a, 1, c,b, c, 1), nrow=3)
data = mvrnorm(n, mu, Sigma, empirical=FALSE)
# Being lazy and generating some data columns from above.
Gender = data[, 1]  # standard normal (mu=0, sd=1)
Income = data[, 2]  # standard normal (mu=0, sd=1)
Insurance= data[, 3]  # standard normal (mu=0, sd=1)
# Gender and income should be binary
Ins <- Insurance>0
Gend <- Gender>0
cor(Ins,Gend)
cor(Ins,Income)
cor(Gend,Income)
# We are going to generate some arbitrary Health Index
Health <- shifter +  rnorm(n,mean=0,sd=1) + b1*Gend + b2*Income + b3* Ins
# Let's do a manual comparison of Health Across the Insured and Uninsured.
mydata <- data.frame(Income, Gend, Health, Ins)
# Calculate Means by Group (using ddply).
mu <- ddply(mydata, "Ins", summarise, grp.mean=mean(Health))
# Plot my health outcome by Insurance Status in Pretty Graph
ggplot(mydata, aes(x=Health, color=Ins, fill=Ins)) +
scale_color_manual(values=c("#002676", "#FC9313")) +
scale_fill_manual(values=c("#002676", "#FC9313")) +
geom_histogram(alpha=0.1, position="identity", bins=50)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=Ins),
linetype="dashed") +
labs(title="Health Outcomes by Insurance Status",x="Health Index", y = "Count")+
theme_classic()
# Let's compare across treatment
# First - do this by hand. Difference in means. Unknown and unequal variances.
M1 <- mean(mydata[Ins == 'TRUE', 'Health'])
M2 <- mean(mydata[Ins == 'FALSE', 'Health'])
n1 <- sum(Ins)
n2 <- n-n1
V1 <- var(mydata[Ins == 'TRUE', 'Health'])
V2 <- var(mydata[Ins == 'FALSE', 'Health'])
S <- sqrt((V1 / n1) + (V2 / n2))
statistic <- (M1 - M2 - 0) / S
print(statistic)
t_health <- t.test(Health ~ Ins)
print(t_health)
t_inc <- t.test(Income ~ Ins)
print(t_inc)
# Lecture 4
# Let's do some testing of differences in means!
# and then some regression stuff.
# The repo also contains a knitr version of this file, which makes nice pdf files.....
rm(list = ls())
set.seed(22092008)
library(pacman)
# ggplot makes pretty graphs. dplyr is awesome. More later.
p_load(ggplot2, dplyr, crosstable, flextable, plyr, MASS,stargazer)
# The goal is to generate some data from the relationship:
# Health <- shifter + b1*Gend + b2*Income + b3* Ins +  rnorm(n,mean=0,sd=1)
# We have to generate data for the variables (Gend, Income, Ins), a residual, and pick values
# for the coefficients. Let's assume a sample size of 1000.
n <- 1000 # Sample Size
mu <- c(0, 0,0) # (means of my rhs variables)
# Let's generate some data as if health insurance were randomized.
# a <- 0.5 # Set to 0.5 as default
# b <- 0.0 # Set to 0.1 as default
# c <- 0.0 # Set to 0.8 as default
# Let's generate some data as if health insurance were not randomized.
a <- 0.5 #Gend Income Covariance
b <- 0.1 #Gend Insurance Covariance
c <- 0.8 #Income Insurance
# Some betas (slope coefficients that only god sees) for later. She knows all!
b1 <-1 # Gend Beta
b2 <-5 # Income Beta
b3 <-0   #Insurance
shifter <- 30
# Now generate the data, given a cetain covariance matrix.
Sigma <- matrix(c(1, a, b, a, 1, c,b, c, 1), nrow=3)
data = mvrnorm(n, mu, Sigma, empirical=FALSE)
# Being lazy and generating some data columns from above.
Gender = data[, 1]  # standard normal (mu=0, sd=1)
Income = data[, 2]  # standard normal (mu=0, sd=1)
Insurance= data[, 3]  # standard normal (mu=0, sd=1)
# Gender and income should be binary
Ins <- Insurance>0
Gend <- Gender>0
cor(Ins,Gend)
cor(Ins,Income)
cor(Gend,Income)
# We are going to generate some arbitrary Health Index
Health <- shifter +  rnorm(n,mean=0,sd=1) + b1*Gend + b2*Income + b3* Ins
# Let's do a manual comparison of Health Across the Insured and Uninsured.
mydata <- data.frame(Income, Gend, Health, Ins)
# Calculate Means by Group (using ddply).
mu <- ddply(mydata, "Ins", summarise, grp.mean=mean(Health))
# Plot my health outcome by Insurance Status in Pretty Graph
ggplot(mydata, aes(x=Health, color=Ins, fill=Ins)) +
scale_color_manual(values=c("#002676", "#FC9313")) +
scale_fill_manual(values=c("#002676", "#FC9313")) +
geom_histogram(alpha=0.1, position="identity", bins=50)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=Ins),
linetype="dashed") +
labs(title="Health Outcomes by Insurance Status",x="Health Index", y = "Count")+
theme_classic()
# Let's compare across treatment
# First - do this by hand. Difference in means. Unknown and unequal variances.
M1 <- mean(mydata[Ins == 'TRUE', 'Health'])
M2 <- mean(mydata[Ins == 'FALSE', 'Health'])
n1 <- sum(Ins)
n2 <- n-n1
V1 <- var(mydata[Ins == 'TRUE', 'Health'])
V2 <- var(mydata[Ins == 'FALSE', 'Health'])
S <- sqrt((V1 / n1) + (V2 / n2))
statistic <- (M1 - M2 - 0) / S
print(statistic)
t_health <- t.test(Health ~ Ins)
print(t_health)
my_test_args=crosstable_test_args(show_method=FALSE)
ft1 <- crosstable(mydata,by="Ins", test=TRUE, funs=c(mean=mean),test_args=my_test_args) %>%
as_flextable()
print (ft1)
---
title: "Lecture 5 - Linear Regression"
# In Class Week 7
rm(list = ls()) # clear memory
# Put your own working Directory Here# if you are on jupyter, use this one:
#Jupyter#  setwd("~/COMPSS_201_2025/lecture_6")
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2024/code/public-repository-1/week_7")
options(htmltools.dir.version = FALSE)
#p_load(sandwich,FSM,skedastic,modelsummary, summarytools,lfe, whitestrap, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr,plyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
#1. Read in data "class_7.csv"
class_7 <-read.csv("class_7.csv")
#2. Regress births on income.
mod_1 <- lm(births ~ income, data=class_7)
class_7$res <-mod_1$resid
summary(mod_1)
# In Class Week 7
rm(list = ls()) # clear memory
# Put your own working Directory Here# if you are on jupyter, use this one:
#Jupyter#  setwd("~/COMPSS_201_2025/lecture_6")
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2024/code/public-repository-1/week_7")
options(htmltools.dir.version = FALSE)
p_load(ggplot2)
# In Class Week 7
rm(list = ls()) # clear memory
# Put your own working Directory Here# if you are on jupyter, use this one:
#Jupyter#  setwd("~/COMPSS_201_2025/lecture_6")
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2024/code/public-repository-1/week_7")
library(pacman)
p_load(ggplot2)
#sandwich,FSM,skedastic,modelsummary, summarytools,lfe, whitestrap, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr,plyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
#1. Read in data "class_7.csv"
class_7 <-read.csv("class_7.csv")
#2. Regress births on income.
mod_1 <- lm(births ~ income, data=class_7)
class_7$res <-mod_1$resid
summary(mod_1)
#3. Plot your residuals against income
ggplot(class_7,aes(x=income, y=res),) +
geom_point(alpha=0.8, shape=16, fill="#002676", color="#002676", size=1)+
geom_line(color="#FC9313", size=0.1)+
labs(title="Disturbances against Income",
x="Income", y = "Disturbance")+
theme_classic(base_size = 20)
#3. Plot your residuals against income
ggplot(class_7,aes(x=income, y=res),) +
geom_point(alpha=0.8, shape=16, fill="#002676", color="#002676", size=1)+
geom_line(color="#FC9313", size=0.1)+
labs(title="Disturbances against Income",
x="Income", y = "Disturbance")+
theme_classic(base_size = 12)
#4. Plot your residuals against time
ggplot(class_7,aes(x=time, y=res),) +
geom_point(alpha=0.8, shape=16, fill="#002676", color="#002676", size=1)+
geom_line(color="#FC9313", size=0.1)+
labs(title="Disturbances against Time",
x="Time", y = "Disturbance")+
theme_classic(base_size = 12)
#5. Test for AR(1) errors by using the residuals from your regression (regress residual on its lag)
mod_3 <- lm(class_7$res~ -1 +  lag(class_7$res), data=class_7)
summary(mod_3)
View(class_7)
View(class_7)
# In Class Week 7
rm(list = ls()) # clear memory
# Put your own working Directory Here# if you are on jupyter, use this one:
#Jupyter#  setwd("~/COMPSS_201_2025/lecture_6")
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2024/code/public-repository-1/week_7")
library(pacman)
p_load(ggplot2,dplyr)
#sandwich,FSM,skedastic,modelsummary, summarytools,lfe, whitestrap, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr,plyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
#1. Read in data "class_7.csv"
class_7 <-read.csv("class_7.csv")
#2. Regress births on income.
mod_1 <- lm(births ~ income, data=class_7)
class_7$res <-mod_1$resid
summary(mod_1)
#3. Plot your residuals against income
ggplot(class_7,aes(x=income, y=res),) +
geom_point(alpha=0.8, shape=16, fill="#002676", color="#002676", size=1)+
geom_line(color="#FC9313", size=0.1)+
labs(title="Disturbances against Income",
x="Income", y = "Disturbance")+
theme_classic(base_size = 12)
# -> Not much to see here. At least not to me.
#4. Plot your residuals against time
ggplot(class_7,aes(x=time, y=res),) +
geom_point(alpha=0.8, shape=16, fill="#002676", color="#002676", size=1)+
geom_line(color="#FC9313", size=0.1)+
labs(title="Disturbances against Time",
x="Time", y = "Disturbance")+
theme_classic(base_size = 12)
# Wowza! That surely looks correlated across time!
#5. Test for AR(1) errors by using the residuals from your regression (regress residual on its lag)
# Use dplyr to add some lags. You could do thsi in base r too. But this is fancier.
class_7 <- class_7 %>%
arrange(time) %>%                    # ensure time is sorted
mutate(lag_res = lag(res, n = 1))    # create 1-period lag of residuals
mod_3 <- lm(res~ lag_res, data=class_7)
summary(mod_3)
mod_3 <- lm(res~ 0 + lag_res, data=class_7)
summary(mod_3)
class_7$ytrans <- class_7$births - mod_3$coefficients*lag(class_7$births)
class_7$xtrans <- class_7$income - mod_3$coefficients*lag(class_7$income)
class_7$one <- 1-mod_3$coefficients
mod_5 <- lm(ytrans ~ -1 +one +xtrans, data=class_7)
summary(mod_5)
mod_1 <- lm(births ~ income, data=class_7)
summary(mod_1)
mod_1 <- lm(births ~ income, data=class_7)
summary(mod_1)
mod_5 <- lm(ytrans ~ -1 +one +xtrans, data=class_7)
summary(mod_5)
mod_3$coefficients
# In Class Week 7
rm(list = ls()) # clear memory
# Put your own working Directory Here# if you are on jupyter, use this one:
#Jupyter#  setwd("~/COMPSS_201_2025/lecture_6")
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2024/code/public-repository-1/week_7")
library(pacman)
p_load(ggplot2,dplyr)
#1. Read in data "class_7.csv"
class_7 <-read.csv("class_7.csv")
#2. Regress births on income.
mod_1 <- lm(births ~ income, data=class_7)
class_7$res <-mod_1$resid
summary(mod_1)
#3. Plot your residuals against income
ggplot(class_7,aes(x=income, y=res),) +
geom_point(alpha=0.8, shape=16, fill="#002676", color="#002676", size=1)+
geom_line(color="#FC9313", size=0.1)+
labs(title="Disturbances against Income",
x="Income", y = "Disturbance")+
theme_classic(base_size = 12)
# -> Not much to see here. At least not to me.
#4. Plot your residuals against time
ggplot(class_7,aes(x=time, y=res),) +
geom_point(alpha=0.8, shape=16, fill="#002676", color="#002676", size=1)+
geom_line(color="#FC9313", size=0.1)+
labs(title="Disturbances against Time",
x="Time", y = "Disturbance")+
theme_classic(base_size = 12)
# Wowza! That surely looks correlated across time!
#5. Test for AR(1) errors by using the residuals from your regression (regress residual on its lag)
# Use dplyr to add some lags. You could do thsi in base r too. But this is fancier.
class_7 <- class_7 %>%
arrange(time) %>%                    # ensure time is sorted
mutate(lag_res = lag(res, n = 1))    # create 1-period lag of residuals
mod_3 <- lm(res~ 0 + lag_res, data=class_7)
summary(mod_3)
# You strongly reject the null of no serial correlation. t= 55.03! Positive serial correlations as rho_hat>0
#6. Follow the steps in the slides on calculating the FGLS estimator.
# Do the transformation. The third one transforms the intercept.
class_7$ytrans <- class_7$births - mod_3$coefficients*lag(class_7$births)
class_7$xtrans <- class_7$income - mod_3$coefficients*lag(class_7$income)
class_7$one <- 1-mod_3$coefficients
# Run model on transformed data.
mod_5 <- lm(ytrans ~ -1 +one +xtrans, data=class_7)
summary(mod_5)
rm(list = ls()) # clear memory
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2024/code/private-repository1/Problem Set 2")
options(htmltools.dir.version = FALSE)
library(pacman)
song_data <- read.csv("~/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2025/COMPSS_201_2025/problem_set_2/song_data.csv")
View(song_data)
song_data[sample(nrow(song_data), 17835), ]
song_data <- song_data[sample(nrow(song_data), 17835), ]
View(song_data)
write.csv(song_data_2025.csv)
write.csv(song_data, "song_data_2025.csv")
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2025/COMPSS_201_2025/problem_set_2")
write.csv(song_data, "song_data_2025.csv")
rm(list = ls()) # clear memory
setwd("/Users/auffhammer/Library/CloudStorage/Dropbox/06_Teaching/MACSS/2024/code/private-repository1/Problem Set 2")
options(htmltools.dir.version = FALSE)
library(pacman)
